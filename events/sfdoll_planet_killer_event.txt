namespace = sfdoll_planet_killer_event
#id标准写法为namespace的值加上编号
#对恒星炮
planet_event = {
	id = sfdoll_planet_killer_event.1
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		#威慑值和得分
		add_threat = { who = from.owner amount = 10 }
		from = {
			save_event_target_as = sfdoll_planet_killer_fleet
			owner = {
				save_event_target_as = crisis_country
				add_victory_score = {
					source = destroyed_stars_score
					score = 10
				}
			}
		}
		#处理殖民地
		if = {
			limit = { is_colony = yes }
			every_owned_pop = {
				kill_pop = yes
			}
			destroy_colony = yes
		}

		#炸的是恒星
		if = {
			limit =  { is_star = yes }
			from = {
				owner = {
					#初次炸恒星
					if = {
						limit = {
							NOT = { has_country_flag = cracked_first_star }
						}
						set_country_flag = cracked_first_star
					}
				}
			}
			#变成黑洞
			# change_pc = pc_black_hole
			# clear_deposits = yes
			# reset_planet = yes
			solar_system = { save_event_target_as = destroyed_system }
			solar_system = {
				destroy_star_system = yes
			}
		}
		else_if = {
			#环世界
			limit  = {
				is_ringworld = yes
			}
			change_pc = pc_shattered_ring_habitable
			clear_deposits = yes
			
		}
		else = {
			change_pc = pc_shattered
			clear_deposits = yes
		}
	}
}

#跨星系攻击触发，改为诺耶露专用,scope = 诺耶露舰船
fleet_event = {
	id = sfdoll_planet_killer_event.2
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		solar_system = {
			save_event_target_as = system_source_of_planet_killer
		}
		save_event_target_as = fleet_source_of_planet_killer
		from = {
			owner = {
				country_event = {
					id = sfdoll_planet_killer_event.3
				}
			}
		}
	}
}

#选择攻击目标
country_event = {
	id = sfdoll_planet_killer_event.3
	title = "sfdoll_planet_killer_event.3"
	desc = "sfdoll_planet_killer_event_3_desc"
	is_triggered_only = yes
	picture = GFX_evp_sfdoll_ship_in_orbit
	immediate = {
		#清除之前留下的event target
		clear_target_of_pk_sfdoll_effect = yes

		#遍历符合条件的星系
		while = {
			count = 6
			random_system = {
				limit = {
					OR = {
						distance = {
							source = event_target:system_source_of_planet_killer
							max_jumps = 1
						}
						distance = {
							source = event_target:system_source_of_planet_killer
							max_distance = 1
						}

					}
					NOT = {
						has_star_flag = flag_sfdoll_planet_killer_target
					}
				}

				#统计变量，每次遍历+1,表示对应第几个选项，遍历完清除
				root = {
					change_variable = {
						which = count_sfdoll_planet_killer_target
						value = 1
					}
				}
	
				star = {
					#为不同选项添加不同的target
					if = {
						limit = { 
							root = {
								check_variable = {
									which = count_sfdoll_planet_killer_target
									value = 1
								}
							}
						}
						save_global_event_target_as = target_1_of_pk_sfdoll
					}
					if = {
						limit = { 
							root = {
								check_variable = {
									which = count_sfdoll_planet_killer_target
									value = 2
								}
							}
						}
						save_global_event_target_as = target_2_of_pk_sfdoll
					}
					if = {
						limit = { 
							root = {
								check_variable = {
									which = count_sfdoll_planet_killer_target
									value = 3
								}
							}
						}
						save_global_event_target_as = target_3_of_pk_sfdoll
					}
					if = {
						limit = { 
							root = {
								check_variable = {
									which = count_sfdoll_planet_killer_target
									value = 4
								}
							}
						}
						save_global_event_target_as = target_4_of_pk_sfdoll
					}
					if = {
						limit = { 
							root = {
								check_variable = {
									which = count_sfdoll_planet_killer_target
									value = 5
								}
							}
						}
						save_global_event_target_as = target_5_of_pk_sfdoll
					}
					if = {
						limit = { 
							root = {
								check_variable = {
									which = count_sfdoll_planet_killer_target
									value = 6
								}
							}
						}
						save_global_event_target_as = target_6_of_pk_sfdoll
					}
				}
				set_star_flag = flag_sfdoll_planet_killer_target
			}

		}
		#清除计算target数的变量
		clear_variable = count_sfdoll_planet_killer_target
	}

	#摧毁诺耶露所在的星系
	option = {
		name = sfdoll_planet_killer_event_3_attack_here
		event_target:system_source_of_planet_killer = {
			star = {
				save_event_target_as = attacked_by_planet_killer
			}
		}
		event_target:fleet_source_of_planet_killer = {
			fleet_event = {
				id = sfdoll_planet_killer_event.4
			}
		}
		remove_flag_sfdoll_planet_killer_target_effect = yes
		clear_target_of_pk_sfdoll_effect = yes
	}

	option = {
		name = sfdoll_planet_killer_event_3_option_1
		trigger = {
			exists = event_target:target_1_of_pk_sfdoll
		}

		event_target:target_1_of_pk_sfdoll = {
			save_event_target_as = attacked_by_planet_killer
		}
		#跳转到发射武器的舰队，用于保证触发后续事件的from和原版w槽触发器一致
		event_target:fleet_source_of_planet_killer = {
			fleet_event = {
				id = sfdoll_planet_killer_event.4
			}
		}
		remove_flag_sfdoll_planet_killer_target_effect = yes
		clear_target_of_pk_sfdoll_effect = yes
	}

	option = {
		name = sfdoll_planet_killer_event_3_option_2
		trigger = {
			exists = event_target:target_2_of_pk_sfdoll
		}
		event_target:target_2_of_pk_sfdoll = {
			save_event_target_as = attacked_by_planet_killer
		}
		#跳转到发射武器的舰队，用于保证触发后续事件的from和原版w槽触发器一致
		event_target:fleet_source_of_planet_killer = {
			fleet_event = {
				id = sfdoll_planet_killer_event.4
			}
		}
		remove_flag_sfdoll_planet_killer_target_effect = yes
		clear_target_of_pk_sfdoll_effect = yes
	}

	option = {
		name = sfdoll_planet_killer_event_3_option_3
		trigger = {
			exists = event_target:target_3_of_pk_sfdoll
		}
		event_target:target_3_of_pk_sfdoll = {
			save_event_target_as = attacked_by_planet_killer
		}
		#跳转到发射武器的舰队，用于保证触发后续事件的from和原版w槽触发器一致
		event_target:fleet_source_of_planet_killer = {
			fleet_event = {
				id = sfdoll_planet_killer_event.4
			}
		}
		remove_flag_sfdoll_planet_killer_target_effect = yes
		clear_target_of_pk_sfdoll_effect = yes
	}
	option = {
		name = sfdoll_planet_killer_event_3_option_4
		trigger = {
			exists = event_target:target_4_of_pk_sfdoll
		}
		event_target:target_4_of_pk_sfdoll = {
			save_event_target_as = attacked_by_planet_killer
		}
		#跳转到发射武器的舰队，用于保证触发后续事件的from和原版w槽触发器一致
		event_target:fleet_source_of_planet_killer = {
			fleet_event = {
				id = sfdoll_planet_killer_event.4
			}
		}
		remove_flag_sfdoll_planet_killer_target_effect = yes
		clear_target_of_pk_sfdoll_effect = yes
	}

	#目标5
	option = {
		name = sfdoll_planet_killer_event_3_option_5
		trigger = {
			exists = event_target:target_5_of_pk_sfdoll
		}
		event_target:target_5_of_pk_sfdoll = {
			save_event_target_as = attacked_by_planet_killer
		}
		#跳转到发射武器的舰队，用于保证触发后续事件的from和原版w槽触发器一致
		event_target:fleet_source_of_planet_killer = {
			fleet_event = {
				id = sfdoll_planet_killer_event.4
			}
		}
		remove_flag_sfdoll_planet_killer_target_effect = yes
		clear_target_of_pk_sfdoll_effect = yes
	}

	#目标6
	option = {
		name = sfdoll_planet_killer_event_3_option_6
		trigger = {
			exists = event_target:target_6_of_pk_sfdoll
		}
		event_target:target_6_of_pk_sfdoll = {
			save_event_target_as = attacked_by_planet_killer
		}
		#跳转到发射武器的舰队，用于保证触发后续事件的from和原版w槽触发器一致
		event_target:fleet_source_of_planet_killer = {
			fleet_event = {
				id = sfdoll_planet_killer_event.4
			}
		}
		remove_flag_sfdoll_planet_killer_target_effect = yes
		clear_target_of_pk_sfdoll_effect = yes
	}

	option = {
		#下一页
		name = sfdoll_planet_killer_event_3_option_11
		trigger = {
			exists = event_target:target_1_of_pk_sfdoll
			exists = event_target:target_2_of_pk_sfdoll
			exists = event_target:target_3_of_pk_sfdoll
			exists = event_target:target_4_of_pk_sfdoll
			exists = event_target:target_5_of_pk_sfdoll
			exists = event_target:target_6_of_pk_sfdoll
		}
		hidden_effect = {
			country_event = {
				id = sfdoll_planet_killer_event.3
			}
		}
	}

	option = {
		#清除星系被选择过的flag，重新选择
		name = sfdoll_planet_killer_event_3_option_12
		remove_flag_sfdoll_planet_killer_target_effect = yes
		clear_target_of_pk_sfdoll_effect = yes
		country_event = { id = sfdoll_planet_killer_event.3	}
	}
	option = {
		#取消本次攻击
		name = QUIT
		remove_flag_sfdoll_planet_killer_target_effect = yes
		clear_target_of_pk_sfdoll_effect = yes
		break = yes
	}
}

#中间事件，从舰队转到被摧毁的恒星，从而让效果的作用域与w槽触发器提供的作用域一致
fleet_event = {
	id = sfdoll_planet_killer_event.4
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		event_target:attacked_by_planet_killer = {
			planet_event = {
				id = sfdoll_planet_killer_event.5
			}
		}
	}
}

#摧毁恒星系，this为目标恒星，from为发射武器的舰队
planet_event = {
	id = sfdoll_planet_killer_event.5
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		remove_flag_sfdoll_planet_killer_target_effect = yes
		#威慑值和得分
		add_threat = { who = from.owner amount = 10 }
		from = {
			owner = {
				set_timed_country_flag = {
					flag = sfdoll_noel_system_attack_cool_down
					days = 30
				}

				#save_event_target_as = crisis_country
				add_victory_score = {
					source = destroyed_stars_score
					score = 10
				}
				#初次炸恒星
				if = {
					limit = {
						NOT = { has_country_flag = cracked_first_star }
					}
					set_country_flag = cracked_first_star
				}
			}
		}
		solar_system = { save_event_target_as = destroyed_system }
		solar_system = {
			destroy_star_system = yes
		}
		from = {
			create_message = {
				type = PLANET_DESTROYED
				localization = message_system_destroyed_sfdoll
				days = 30
				target = prev
			}
		}
	}
}


#航道修改，控制界面
country_event = {
	id = sfdoll_planet_killer_event.6
	title = sfdoll_planet_killer_event.6
	desc = sfdoll_planet_killer_event.6_desc
	is_triggered_only = yes
	picture = GFX_evp_sfdoll_ship_in_orbit
	#刷新信标船
	option = {
		name = sfdoll_planet_killer_event.6_option_a
		allow = {
			#刷新有60天CD
			custom_tooltip = {
				fail_text = create_sfdoll_change_hyperlane_ship_wait
				NOT = {		has_country_flag = flag_create_sfdoll_change_hyperlane_ship	}
			}
		}
		hidden_effect = {
			set_timed_country_flag = {
				flag = flag_create_sfdoll_change_hyperlane_ship
				days = 60
			}
			effect_create_sfdoll_change_hyperlane_ship = yes
			country_event = {
				id = sfdoll_planet_killer_event.6
			}
		}
	}
	#修改航道
	option = {
		name = sfdoll_planet_killer_event.6_option_b
		hidden_effect = {
			effect_change_hyperlane_sfdoll = yes
			country_event = {
				id = sfdoll_planet_killer_event.6
			}
		}
	}
	#摧毁星系，删除信标
	# option = {
	# 	name = sfdoll_planet_killer_event.6_option_c
	# 	allow = {
	# 		always = no
	# 	}
	# 	custom_tooltip = "text_sfdoll_planet_killer_event.6_option_c"
	# 	hidden_effect = {
	# 		event_target:fleet_beacon_sfdoll_1={
	# 			fleet_event = {
	# 				id = sfdoll_planet_killer_event.7
	# 			}
	# 		}
	# 		event_target:fleet_beacon_sfdoll_2 ={
	# 			fleet_event = {
	# 				id = sfdoll_planet_killer_event.7
	# 			}
	# 		}
	# 		delete_fleet = event_target:fleet_beacon_sfdoll_1
	# 		clear_global_event_target = fleet_beacon_sfdoll_1
	# 		delete_fleet = event_target:fleet_beacon_sfdoll_2
	# 		clear_global_event_target = fleet_beacon_sfdoll_2
	# 	}
	# }
	#退出
	option = {
		name = "QUIT"
		hidden_effect = {
			break = yes
		}
	}
}
#从舰队作用域转到被毁的目标恒星
fleet_event = {
	id= sfdoll_planet_killer_event.7
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		solar_system = {
			star = {
				planet_event = {
					id = sfdoll_planet_killer_event.8
				}
			}
		}
	}
}
#铁血之矛，摧毁所在星系，from为发射的舰队
planet_event = {
	id = sfdoll_planet_killer_event.8
	title = sfdoll_planet_killer_event.8
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		#威慑值和得分
		add_threat = { who = from.owner amount = 10 }
		from = {
			owner = {
				add_victory_score = {
					source = destroyed_stars_score
					score = 10
				}
				#初次炸恒星
				if = {
					limit = {
						NOT = { has_country_flag = cracked_first_star }
					}
					set_country_flag = cracked_first_star
				}
			}
		}
		solar_system = { save_event_target_as = destroyed_system }
		solar_system = {
			destroy_star_system = yes
		}
		from = {
			create_message = {
				type = PLANET_DESTROYED
				localization = message_system_destroyed_sfdoll
				days = 30
				target = prev
			}
		}
	}
}


#T槽碎星炮，判断是否可以触发,from is planet
fleet_event = {
	id = sfdoll_planet_killer_event.9
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		owner = {
			is_ai = no
			has_authority = auth_gf_sfdoll
			has_edict = sfdoll_weapen_t_7_control
		}
	}
	immediate = {
		fleet_event = {
			id = sfdoll_planet_killer_event.10
		}
	}
}
#fromfrom is planet
fleet_event = {
	id = sfdoll_planet_killer_event.10
	title = sfdoll_planet_killer_event.10
	desc = sfdoll_planet_killer_event.10.desc
	picture = GFX_evp_sfdoll_planet_beam
	location = this
	hide_window = no
	is_triggered_only = yes
	trigger = {
		any_owned_ship = {
			has_component = sfdoll_weapen_t_7
		}
		fromfrom = {
			NOT = {
				OR = {
					is_star = yes
					is_planet_class = pc_shattered
					is_planet_class = pc_shattered_2
					is_planet_class = pc_shattered_ring_habitable
				}
			}
		}
	}
	#摧毁星球
	option = {
		name = sfdoll_planet_killer_event.10_a
		hidden_effect = {
			fromfrom = {
				planet_event = {
					id = sfdoll_planet_killer_event.11
				}
			}
		# 	#威慑值和得分
		# 	owner = {
		# 		add_threat = { who = from.owner amount = 3 }
		# 		#save_event_target_as = crisis_country
		# 		add_victory_score = {
		# 			source = destroyed_stars_score
		# 			score = 5
		# 		}
		# 	}
			
		# 	#planet
		# 	fromfrom = {
		# 		#处理殖民地
		# 		if = {
		# 			limit = { is_colony = yes }
		# 			every_owned_pop = {
		# 				kill_pop = yes
		# 			}
		# 			destroy_colony = yes
		# 		}
		# 		#炸的是恒星
		# 		# if = {
		# 		# 	limit =  { is_star = yes }
		# 		# 	root = {
		# 		# 		owner = {
		# 		# 			#初次炸恒星
		# 		# 			if = {
		# 		# 				limit = {
		# 		# 					NOT = { has_country_flag = cracked_first_star }
		# 		# 				}
		# 		# 				set_country_flag = cracked_first_star
		# 		# 			}
		# 		# 		}
		# 		# 	}
		# 		# 	#变成黑洞
		# 		# 	change_pc = pc_black_hole
		# 		# 	clear_deposits = yes
		# 		# 	reset_planet = yes
		# 		# }
		# 		if = {
		# 			#环世界
		# 			limit  = {
		# 				is_ringworld = yes
		# 			}
		# 			change_pc = pc_shattered_ring_habitable
		# 			clear_deposits = yes
		# 		}
		# 		else = {
		# 			change_pc = pc_shattered
		# 			clear_deposits = yes
		# 		}
		# 	}
		# 	create_message = {
		# 		type = PLANET_DESTROYED
		# 		localization = message_planet_destroyed_sfdoll
		# 		days = 30
		# 		target = fromfrom
		# 	}
		}
	}
	option = {
		name = sfdoll_break_option
	}
}

#T槽对星武器,from = fleet，和W槽触发时的作用域保持一致
planet_event = {
	id = sfdoll_planet_killer_event.11
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		#威慑值和得分
		add_threat = { who = from.owner amount = 10 }
		from = {
			owner = {
				save_event_target_as = crisis_country
				add_victory_score = {
					source = destroyed_stars_score
					score = 10
				}
			}
		}
		#处理殖民地
		if = {
			limit = { is_colony = yes }
			every_owned_pop = {
				kill_pop = yes
			}
			destroy_colony = yes
		}

		#炸的是恒星
		# if = {
		# 	limit =  { is_star = yes }
		# 	from = {
		# 		owner = {
		# 			#初次炸恒星
		# 			if = {
		# 				limit = {
		# 					NOT = { has_country_flag = cracked_first_star }
		# 				}
		# 				set_country_flag = cracked_first_star
		# 			}
		# 		}
		# 	}
		# 	solar_system = { save_event_target_as = destroyed_system }
		# 	solar_system = {
		# 		destroy_star_system = yes
		# 	}
		# }
		# else= {
		# 	#变成黑洞
		# 	change_pc = pc_black_hole
		# 	clear_deposits = yes
		# 	reset_planet = yes
		# 	set_planet_entity = {
		# 		entity = sfdoll_black_hole_entity
		# 	}
		# }
		#用T槽碎行星
		if = {
			#环世界
			limit  = {
				is_ringworld = yes
			}
			change_pc = pc_shattered_ring_habitable
			clear_deposits = yes
			
		}
		else = {
			change_pc = pc_shattered
			clear_deposits = yes
		}
	}
}

#清空星系
planet_event = {
	id = sfdoll_planet_killer_event.12
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		#威慑值和得分
		add_threat = { who = from.owner amount = 10 }
		from = {
			save_event_target_as = sfdoll_planet_killer_fleet
			owner = {
				save_event_target_as = crisis_country
				add_victory_score = {
					source = destroyed_stars_score
					score = 10
				}
			}
		}
		from = {
			owner = {
				#初次炸恒星
				if = {
					limit = {
						NOT = { has_country_flag = cracked_first_star }
					}
					set_country_flag = cracked_first_star
				}
				# create_message = {
				# 	type = STAR_DESTROYED
				# 	localization = message_system_destroyed_sfdoll
				# 	target = root
				# 	days = 30
				# }
			}
		}

		solar_system = { save_event_target_as = destroyed_system }
		solar_system = { effect_sfdoll_empty_system = yes	}
		# else = {
		# 	if = {
		# 		limit = { is_colony = yes }
		# 		every_owned_pop = {
		# 			kill_pop = yes
		# 		}
		# 		destroy_colony = yes
		# 	}
		# 	remove_planet = yes
		# }

	}
}


#殖民W槽
planet_event = {
	id = sfdoll_planet_killer_event.13
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_anomaly = no
		can_colonize = {
			who = root.from.owner
			status = yes
		}
	}
	immediate = {
		start_colony = {
			owner = from.owner
		}
	}
}

#W槽将星球转化为黑洞
planet_event = {
	id = sfdoll_planet_killer_event.14
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		#威慑值和得分
		add_threat = { who = from.owner amount = 10 }
		from = {
			save_event_target_as = sfdoll_planet_killer_fleet
			owner = {
				save_event_target_as = crisis_country
				add_victory_score = {
					source = destroyed_stars_score
					score = 10
				}
			}
		}
		#处理殖民地
		if = {
			limit = { is_colony = yes }
			every_owned_pop = {	kill_pop = yes	}
			destroy_colony = yes
		}

		#炸的是恒星
		if = {
			limit =  { is_star = yes }
			from = {
				owner = {
					#初次炸恒星
					if = {
						limit = {
							NOT = { has_country_flag = cracked_first_star }
						}
						set_country_flag = cracked_first_star
					}
				}
			}
			#变成黑洞
			change_pc = pc_black_hole
			clear_deposits = yes
			reset_planet = yes
			solar_system = {
				set_star_flag = star_cracked
				set_star_class = sc_black_hole
			}
		}
		else_if = {
			#环世界
			limit  = {
				is_ringworld = yes
			}
			change_pc = pc_shattered_ring_habitable
			clear_deposits = yes
			
		}
		else = {
			change_pc = pc_shattered
			clear_deposits = yes
		}
		# else_if = {
		# 	#消灭居住站
		# 	limit = { is_planet_class = pc_habitat }
		# 	remove_planet = yes
		# }
		# else = {
		# 	change_pc = pc_black_hole
		# 	set_planet_size = 
		# 	clear_deposits = yes
		# }
	}
}
